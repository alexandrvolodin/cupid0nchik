server:
  servlet:
    context-path: /api/chat-service # Базовый путь для REST контроллеров
  port: 8060 # Используем порт 8060, как вы и просили
  forward-headers-strategy: framework

spring:
  main:
    banner-mode: off
  application:
    name: chat-service
  datasource:
    url: jdbc:postgresql://${DB_HOST:chat-db}:${DB_PORT:5432}/${DB_NAME:cupid-meet-chat}
    username: ${DB_USER:postgres} # Имя пользователя из Docker Compose
    password: ${DB_PASSWORD:postgres} # Пароль из Docker Compose
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
  liquibase:
    change-log: db/changelog/changelog.xml
    enabled: false # Обычно для работы Liquibase нужно включить его
  jpa:
    hibernate:
      ddl-auto: update # Используйте 'update' или 'validate' для продакшена, 'create' для разработки
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${KEYCLOAK_JWK_URI:http://keycloak-server:8080/realms/cupid-meet-dev/protocol/openid-connect/certs} # Указываем URI JWKS Keycloak из Docker Compose

management:
  server:
    port: 8092 # Порт Actuator, отличный от основного порта приложения (8060)
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health, info, prometheus, loggers

application:
  cors:
    # Включаем все возможные источники: фронтенд, user-details-service, сам chat-service, Keycloak
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8728,http://localhost:8060,http://localhost:8080}
  user-details-service:
    url: http://user-details-service-app:8728/api/user-details-service

# Следующая секция Keycloak не требуется, если вы полностью перешли на нативную поддержку Spring Security OAuth2.
# Однако, если она все еще присутствует в вашем коде из-за какой-либо неявной зависимости или старых настроек,
# то для корректности работы в Docker Compose она должна указывать на имя сервиса Keycloak.
# keycloak:
#   auth-server-url: ${KEYCLOAK_SERVER_URL:http://keycloak-server:8080/auth}
#   realm: ${KEYCLOAK_REALM:cupid-meet-dev}
#   resource: ${KEYCLOAK_CLIENT:cupid-meet-dev}
#   bearer-only: true
logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.web.filter.OncePerRequestFilter: TRACE
    org.springframework.web.client.RestTemplate: DEBUG # Если RestTemplate используется для получения JWKS
    org.springframework.web.reactive.function.client.WebClient: DEBUG # Если WebClient используется для получения JWKS (более вероятно в новых версиях)
    com.cupidmeet: DEBUG